#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ HeadHunter API.
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_env_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===")
    
    required_vars = [
        'CLIENT_ID1',
        'CLIENT_SECRET1', 
        'ACCESS_TOKEN1',
        'REFRESH_TOKEN1',
        'REDIRECT_URI1'
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {value[:10]}..." if len(value) > 10 else f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: –ù–ï –ù–ê–ô–î–ï–ù")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        print("–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env")
        return False
    
    print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã!")
    return True

def test_token_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏."""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ç–æ–∫–µ–Ω–æ–≤ ===")
    
    try:
        from api.hh.main import (
            get_authorization_url,
            get_tokens_from_refresh_token,
            validate_token,
            get_token_info,
            HHApiClient
        )
        
        # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        client_id = os.getenv('CLIENT_ID1')
        redirect_uri = os.getenv('REDIRECT_URI1')
        
        if client_id and redirect_uri:
            auth_url = get_authorization_url(client_id, redirect_uri, "test_state")
            print(f"‚úÖ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_url}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
        print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞...")
        access_token = os.getenv('ACCESS_TOKEN1')
        
        if access_token:
            is_valid = validate_token(access_token)
            print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: {is_valid}")
            
            if is_valid:
                token_info = get_token_info(access_token)
                if token_info:
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {token_info.get('first_name', '')} {token_info.get('last_name', '')}")
                    print(f"‚úÖ Email: {token_info.get('email', '')}")
        else:
            print("‚ùå ACCESS_TOKEN1 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
        client_secret = os.getenv('CLIENT_SECRET1')
        refresh_token = os.getenv('REFRESH_TOKEN1')
        
        if all([client_id, client_secret, refresh_token]):
            try:
                token_data = get_tokens_from_refresh_token(client_id, client_secret, refresh_token)
                print("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                print(f"‚úÖ –ù–æ–≤—ã–π access_token: {token_data['access_token'][:20]}...")
                print(f"‚úÖ Expires in: {token_data['expires_in']} —Å–µ–∫—É–Ω–¥")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
                print("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª:")
                print(f"ACCESS_TOKEN1={token_data['access_token']}")
                if 'refresh_token' in token_data:
                    print(f"REFRESH_TOKEN1={token_data['refresh_token']}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        else:
            print("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –¢–µ—Å—Ç 4: HHApiClient
        print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º HHApiClient...")
        try:
            client = HHApiClient()
            is_valid = client.validate_current_token()
            print(f"‚úÖ HHApiClient —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: {is_valid}")
            
            if is_valid:
                user_info = client.get_current_token_info()
                if user_info:
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞: {user_info.get('first_name', '')} {user_info.get('last_name', '')}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ HHApiClient: {e}")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ HeadHunter API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not test_env_variables():
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    test_token_functions()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 