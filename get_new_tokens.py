#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ HeadHunter API.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è authorization code.
"""

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_new_tokens():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ authorization code."""
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ HeadHunter API")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
    client_id = os.getenv('CLIENT_ID1')
    client_secret = os.getenv('CLIENT_SECRET1')
    redirect_uri = os.getenv('REDIRECT_URI1')
    
    if not all([client_id, client_secret, redirect_uri]):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CLIENT_ID1, CLIENT_SECRET1 –∏ REDIRECT_URI1 –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    from api.hh.main import get_authorization_url
    auth_url = get_authorization_url(client_id, redirect_uri, "new_tokens")
    
    print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:")
    print(f"   {auth_url}")
    print("\n2. –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ URL –≤–∏–¥–∞:")
    print(f"   {redirect_uri}?code=AUTHORIZATION_CODE&state=new_tokens")
    print("\n3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ AUTHORIZATION_CODE –∏–∑ URL")
    print("\n4. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º authorization code
    auth_code = input("\n–í–≤–µ–¥–∏—Ç–µ authorization code: ").strip()
    
    if not auth_code:
        print("‚ùå Authorization code –Ω–µ –≤–≤–µ–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    try:
        from api.hh.main import get_tokens_from_code
        
        print("\nüîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã...")
        token_data = get_tokens_from_code(
            client_id,
            client_secret,
            auth_code,
            redirect_uri
        )
        
        print("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")
        print(f"‚úÖ Access Token: {token_data['access_token'][:20]}...")
        print(f"‚úÖ Refresh Token: {token_data['refresh_token'][:20]}...")
        print(f"‚úÖ Expires In: {token_data['expires_in']} —Å–µ–∫—É–Ω–¥")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env
        print("\nüíæ –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª...")
        update_env_file(token_data)
        
        print("\n‚úÖ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .env —Ñ–∞–π–ª!")
        print("–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python test_tokens.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")

def update_env_file(token_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª –Ω–æ–≤—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏."""
    env_file = '.env'
    
    if not os.path.exists(env_file):
        print(f"‚ùå –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
    with open(env_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
    updated = False
    for i, line in enumerate(lines):
        if line.startswith('ACCESS_TOKEN1='):
            lines[i] = f"ACCESS_TOKEN1={token_data['access_token']}\n"
            updated = True
        elif line.startswith('REFRESH_TOKEN1='):
            lines[i] = f"REFRESH_TOKEN1={token_data['refresh_token']}\n"
            updated = True
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if not updated:
        lines.append(f"ACCESS_TOKEN1={token_data['access_token']}\n")
        lines.append(f"REFRESH_TOKEN1={token_data['refresh_token']}\n")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(env_file, 'w', encoding='utf-8') as f:
        f.writelines(lines)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    get_new_tokens()

if __name__ == "__main__":
    main() 