from typing import Dict, Any, List, Optional
from datetime import datetime
import json
import uuid
from utils.logger import setup_logger
from redis_manager import redis_manager


logger = setup_logger(__name__)


class ResumeProcessor:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—ã—Ä–æ–π JSON –æ—Ç HeadHunter –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ –ø–æ–ª—è–º–∏.

    Attributes:
        raw_data (dict): –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–∑ API HH.
        use_cache (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Redis.
        cache_ttl (int): –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    """

    CACHE_TTL = 60 * 60 * 24  # 24 —á–∞—Å–∞

    def __init__(self, raw_data: Dict[str, Any], use_cache: bool = True):
        self.raw_data = raw_data
        self.use_cache = use_cache
        self.cache_ttl = self.CACHE_TTL

    def _make_cache_key(self, resume_id: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è Redis –Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Ä–µ–∑—é–º–µ."""
        return f"processed_resume:{resume_id}"

    def _get_cached_processed_resume(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –∏–∑ Redis –ø–æ ID."""
        if not self.use_cache:
            return None

        resume_id = self.raw_data.get("id")
        if not resume_id:
            return None

        cache_key = self._make_cache_key(resume_id)
        cached = redis_manager.client.get(cache_key)
        if cached:
            logger.debug(f"–†–µ–∑—é–º–µ {resume_id} –≤–∑—è—Ç–æ –∏–∑ Redis-–∫—ç—à–∞")
            return json.loads(cached)
        return None

    def _save_processed_resume(self, processed_data: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –≤ Redis."""
        if not self.use_cache:
            return

        resume_id = processed_data.get("id") or str(uuid.uuid4())
        cache_key = self._make_cache_key(resume_id)

        try:
            redis_manager.client.setex(cache_key, self.cache_ttl, json.dumps(processed_data))
            logger.debug(f"–†–µ–∑—é–º–µ {resume_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Redis")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ –≤ Redis: {e}")

    def process(self) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∏–∑ —Ä–µ–∑—é–º–µ.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—ç—à –≤ Redis. –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ –∫—ç—à–∞.
        –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à.

        Returns:
            dict: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ.
        """
        # –®–∞–≥ 1: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
        cached = self._get_cached_processed_resume()
        if cached:
            return cached

        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ raw_data –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        if not isinstance(self.raw_data, dict):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ: –æ–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å")
            raise ValueError("raw_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º")

        # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            resume_id = self.raw_data.get("id", "unknown")

            result = {
                "id": resume_id,
                "full_name": self._get_full_name(),
                "first_name": self.raw_data.get("first_name", ""),
                "middle_name": self.raw_data.get("middle_name", ""),  # üëà –î–æ–±–∞–≤–∏–ª–∏
                "last_name": self.raw_data.get("last_name", ""),
                "age": self._get_age(),
                "contacts": self._get_contacts(),
                "location": self._get_location(),
                "resume_title": self._get_title(),
                "salary_amount": self.raw_data.get("salary", {}).get("amount") if self.raw_data.get("salary") else None,
                "salary_currency": self.raw_data.get("salary", {}).get("currency") if self.raw_data.get("salary") else None,
                "experience": self._get_experience(),  # –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON
                "link": self._get_link(),
                "received_at": datetime.utcnow().isoformat()
            }

            # –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            self._save_processed_resume(result)

            logger.debug(f"–†–µ–∑—é–º–µ {resume_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ: {e}")
            raise

    def _get_full_name(self) -> str:
        first = self.raw_data.get("first_name")
        middle = self.raw_data.get("middle_name")
        last = self.raw_data.get("last_name")

        parts = [first, middle, last]
        full_name = " ".join([p for p in parts if p])
        return full_name or "–ù–µ —É–∫–∞–∑–∞–Ω"

    def _get_age(self) -> Optional[int]:
        age = self.raw_data.get("age")
        if isinstance(age, int):
            return age
        return None

    def _get_contacts(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã (email, —Ç–µ–ª–µ—Ñ–æ–Ω)."""
        contacts = []

        for contact in self.raw_data.get("contact", []):
            contact_type = contact.get("type", {}).get("id")
            value = contact.get("value")
            if contact_type == "email":
                contacts.append(f"Email: {value}")
            elif contact_type == "cell":
                contacts.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: {value}")

        return "; ".join(contacts) if contacts else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    def _get_location(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è."""
        area = self.raw_data.get("area", {})
        return area.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    def _get_title(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ (–¥–æ–ª–∂–Ω–æ—Å—Ç—å)."""
        return self.raw_data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    def _get_experience(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≤–∏–¥–µ JSON-—Å—Ç—Ä–æ–∫–∏."""
        experience = self.raw_data.get("experience", [])
        return json.dumps(experience, ensure_ascii=False)

    def _get_link(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ."""
        return self.raw_data.get("link", "")