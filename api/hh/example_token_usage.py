"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ HeadHunter API.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
2. –ö–∞–∫ –æ–±–º–µ–Ω—è—Ç—å authorization code –Ω–∞ —Ç–æ–∫–µ–Ω—ã
3. –ö–∞–∫ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω—ã
4. –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from api.hh.main import (
    get_authorization_url,
    get_tokens_from_code,
    get_tokens_from_refresh_token,
    validate_token,
    get_token_info,
    HHApiClient
)
from config.main import Config as conf

def example_get_authorization_url():
    """
    –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    print("=== –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    client_id = conf.CLIENT_ID1
    redirect_uri = conf.REDIRECT_URI1
    
    if not client_id or not redirect_uri:
        print("–û—à–∏–±–∫–∞: CLIENT_ID1 –∏–ª–∏ REDIRECT_URI1 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_url = get_authorization_url(client_id, redirect_uri, state="random_state_string")
    print(f"URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_url}")
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —ç—Ç–æ–º—É URL –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
    print("–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–Ω –ø–æ–ª—É—á–∏—Ç authorization code")

def example_exchange_code_for_tokens():
    """
    –ü—Ä–∏–º–µ—Ä –æ–±–º–µ–Ω–∞ authorization code –Ω–∞ —Ç–æ–∫–µ–Ω—ã.
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã ===")
    
    # –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    client_id = conf.CLIENT_ID1
    client_secret = conf.CLIENT_SECRET1
    redirect_uri = conf.REDIRECT_URI1
    
    if not all([client_id, client_secret, redirect_uri]):
        print("–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # authorization_code –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç HeadHunter
    authorization_code = "P4U8TJDUJEI0I9R0FA8LPEOBNQ6A28LLEPB9N7JNSR0B7E2N74ITMNVGM73FHCR7"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥
    
    try:
        token_data = get_tokens_from_code(
            client_id,
            client_secret,
            authorization_code,
            redirect_uri
        )
        
        print("–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:")
        print(f"Access Token: {token_data['access_token'][:20]}...")
        print(f"Refresh Token: {token_data['refresh_token'][:20]}...")
        print(f"Expires In: {token_data['expires_in']} —Å–µ–∫—É–Ω–¥")
        print(f"Token Type: {token_data.get('token_type', 'Bearer')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª...")
        if save_tokens_to_env(token_data):
            print("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            print("–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python test_tokens.py")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")

def save_tokens_to_env(token_data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª.
    """
    import os
    
    env_file = os.path.join(os.path.dirname(__file__), '..', '..', '.env')
    
    if not os.path.exists(env_file):
        print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
        with open(env_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
        updated_access = False
        updated_refresh = False
        
        for i, line in enumerate(lines):
            if line.startswith('ACCESS_TOKEN1='):
                lines[i] = f"ACCESS_TOKEN1={token_data['access_token']}\n"
                updated_access = True
            elif line.startswith('REFRESH_TOKEN1='):
                lines[i] = f"REFRESH_TOKEN1={token_data['refresh_token']}\n"
                updated_refresh = True
        
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if not updated_access:
            lines.append(f"ACCESS_TOKEN1={token_data['access_token']}\n")
        if not updated_refresh:
            lines.append(f"REFRESH_TOKEN1={token_data['refresh_token']}\n")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(env_file, 'w', encoding='utf-8') as f:
            f.writelines(lines)
        
        print("‚úÖ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .env —Ñ–∞–π–ª!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return False

def example_refresh_tokens():
    """
    –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ ===")
    
    client_id = conf.CLIENT_ID1
    client_secret = conf.CLIENT_SECRET1
    refresh_token = conf.REFRESH_TOKEN1
    
    if not all([client_id, client_secret, refresh_token]):
        print("–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    try:
        token_data = get_tokens_from_refresh_token(
            client_id,
            client_secret,
            refresh_token
        )
        
        print("–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:")
        print(f"New Access Token: {token_data['access_token']}...")
        if 'refresh_token' in token_data:
            print(f"New Refresh Token: {token_data['refresh_token']}...")
        print(f"Expires In: {token_data['expires_in']} —Å–µ–∫—É–Ω–¥")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª...")
        if save_tokens_to_env(token_data):
            print("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            print("–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python test_tokens.py")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")

def example_validate_token():
    """
    –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞.
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ ===")
    
    access_token = conf.ACCESS_TOKEN1
    
    if not access_token:
        print("–û—à–∏–±–∫–∞: ACCESS_TOKEN1 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    is_valid = validate_token(access_token)
    print(f"–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: {is_valid}")
    
    if is_valid:
        token_info = get_token_info(access_token)
        if token_info:
            print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {token_info.get('first_name', '')} {token_info.get('last_name', '')}")
            print(f"Email: {token_info.get('email', '')}")
            print(f"ID: {token_info.get('id', '')}")

def example_using_hh_client():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HHApiClient –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏.
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HHApiClient ===")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
    client = HHApiClient()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    is_valid = client.validate_current_token()
    print(f"–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: {is_valid}")
    
    if not is_valid:
        print("–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...")
        try:
            client.refresh_access_token()
            print("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = client.get_current_token_info()
    if user_info:
        print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:")
        print(f"–ò–º—è: {user_info.get('first_name', '')} {user_info.get('last_name', '')}")
        print(f"Email: {user_info.get('email', '')}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã)
    try:
        auth_url = client.get_authorization_url(state="example_state")
        print(f"\nURL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {auth_url}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.
    """
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ HeadHunter API")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã
    example_get_authorization_url()
    example_exchange_code_for_tokens()
    example_refresh_tokens()
    example_validate_token()
    example_using_hh_client()
    
    print("\n" + "=" * 60)
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main() 