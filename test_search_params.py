#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞.
"""

import requests
import json
from urllib.parse import urlencode, parse_qs

def test_search_parameters_preservation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—á—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    base_url = "http://localhost:5000"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    search_params = {
        "keywords[]": ["python developer", "middle"],
        "source": "hh",
        "region": ["2019", "1"],  # –ú–æ—Å–∫–≤–∞ –∏ –†–æ—Å—Å–∏—è
        "total": "10",
        "per_page": "5",
        "salary_from": "100000",
        "salary_to": "200000",
        "currency": "RUR",
        "experience": ["between1And3", "between3And6"],
        "education_levels": ["higher", "bachelor"],
        "employment": ["full"],
        "schedule": ["fullDay", "remote"],
        "age_from": "25",
        "age_to": "35",
        "gender": "male",
        "job_search_status": ["active_search"],
        "period": "30",
        "relocation": "living_or_relocation",
        "order_by": "relevance",
        "label": ["only_with_salary", "only_with_photo"],
        "text_logic[]": ["all", "any"],
        "text_field[]": ["everywhere", "title"],
        "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"
    }
    
    try:
        # –®–∞–≥ 1: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        print("\n1Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
        response = requests.get(f"{base_url}/search", params=search_params, allow_redirects=False)
        print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 302:
            redirect_url = response.headers.get('Location')
            print(f"   –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: {redirect_url}")
            
            if "/search_preview/" in redirect_url:
                task_id = redirect_url.split("/search_preview/")[1].split("?")[0]
                print(f"   Task ID: {task_id}")
                
                # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...")
                preview_response = requests.get(f"{base_url}/search_preview/{task_id}")
                
                if preview_response.status_code == 200:
                    print("   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    
                    # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫" –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º URL
                    if "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫" in preview_response.text:
                        print("   ‚úÖ –ö–Ω–æ–ø–∫–∞ '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫' –Ω–∞–π–¥–µ–Ω–∞")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
                        import re
                        modify_search_pattern = r'href="([^"]*search[^"]*\?[^"]*)"'
                        match = re.search(modify_search_pattern, preview_response.text)
                        
                        if match:
                            modify_search_url = match.group(1)
                            print(f"   URL –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫': {modify_search_url}")
                            
                            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–µ –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                            print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–µ –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
                            if "?" in modify_search_url:
                                query_string = modify_search_url.split("?", 1)[1]
                                parsed_params = parse_qs(query_string)
                                
                                print("   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫':")
                                for key, values in parsed_params.items():
                                    print(f"     {key}: {values}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                expected_params = {
                                    "keywords[]": ["python developer", "middle"],
                                    "source": ["hh"],
                                    "region": ["2019", "1"],
                                    "total": ["10"],
                                    "per_page": ["5"],
                                    "salary_from": ["100000"],
                                    "salary_to": ["200000"],
                                    "currency": ["RUR"],
                                    "experience": ["between1And3", "between3And6"],
                                    "education_levels": ["higher", "bachelor"],
                                    "employment": ["full"],
                                    "schedule": ["fullDay", "remote"],
                                    "age_from": ["25"],
                                    "age_to": ["35"],
                                    "gender": ["male"],
                                    "job_search_status": ["active_search"],
                                    "period": ["30"],
                                    "relocation": ["living_or_relocation"],
                                    "order_by": ["relevance"],
                                    "label": ["only_with_salary", "only_with_photo"],
                                    "text_logic[]": ["all", "any"],
                                    "text_field[]": ["everywhere", "title"],
                                    "description": ["–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"]
                                }
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                missing_params = []
                                for key, expected_values in expected_params.items():
                                    if key not in parsed_params:
                                        missing_params.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {key}")
                                    elif parsed_params[key] != expected_values:
                                        missing_params.append(f"–ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç {key}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_values}, –ø–æ–ª—É—á–µ–Ω–æ {parsed_params[key]}")
                                
                                if missing_params:
                                    print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
                                    for issue in missing_params:
                                        print(f"     {issue}")
                                else:
                                    print("   ‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã")
                                
                                # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                                print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
                                form_response = requests.get(f"{base_url}/search", params=parsed_params)
                                
                                if form_response.status_code == 200:
                                    print("   ‚úÖ –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–µ
                                    form_text = form_response.text
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                    if "python developer" in form_text and "middle" in form_text:
                                        print("   ‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–µ")
                                    else:
                                        print("   ‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–µ")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
                                    if "100000" in form_text and "200000" in form_text:
                                        print("   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ä–ø–ª–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–µ")
                                    else:
                                        print("   ‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–µ")
                                        
                                else:
                                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã: {form_response.status_code}")
                                    
                        else:
                            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫'")
                    else:
                        print("   ‚ùå –ö–Ω–æ–ø–∫–∞ '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {preview_response.status_code}")
                    
            else:
                print("   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π URL –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                
        else:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_simple_search_parameters():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"""
    
    base_url = "http://localhost:5000"
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞...")
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    simple_params = {
        "keywords[]": ["python"],
        "source": "hh",
        "region": ["2019"],
        "total": "5"
    }
    
    try:
        response = requests.get(f"{base_url}/search", params=simple_params, allow_redirects=False)
        
        if response.status_code == 302:
            redirect_url = response.headers.get('Location')
            task_id = redirect_url.split("/search_preview/")[1].split("?")[0]
            
            preview_response = requests.get(f"{base_url}/search_preview/{task_id}")
            
            if preview_response.status_code == 200:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
                import re
                modify_search_pattern = r'href="([^"]*search[^"]*\?[^"]*)"'
                match = re.search(modify_search_pattern, preview_response.text)
                
                if match:
                    modify_search_url = match.group(1)
                    query_string = modify_search_url.split("?", 1)[1]
                    parsed_params = parse_qs(query_string)
                    
                    print("   –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL:")
                    for key, values in parsed_params.items():
                        print(f"     {key}: {values}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    if "keywords[]" in parsed_params and "region" in parsed_params:
                        print("   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        print("   ‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã")
                        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞")
    print("=" * 60)
    
    test_search_parameters_preservation()
    test_simple_search_parameters()
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ") 