üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:

./
‚îú‚îÄ‚îÄ merge_py_html.py
‚îú‚îÄ‚îÄ models.py
‚îî‚îÄ‚îÄ output.txt
‚îú‚îÄ‚îÄ repository.py
‚îú‚îÄ‚îÄ session.py

================================================================================



üìÑ –§–∞–π–ª: merge_py_html.py
-----------------------
import os

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫–ª–µ–∏—Ç—å
INCLUDE_EXTENSIONS = {".py", ".html"}

# –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
IGNORE_ITEMS = {
    ".git",
    "__pycache__",
    ".env",
    "venv",
    "env",
    ".gitignore",
    ".pyc",
    "__pycache__",
    ".DS_Store",
    ".pytest_cache"
}

def should_ignore(name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É."""
    return name in IGNORE_ITEMS or name.startswith(".") or name.startswith("__")

def get_project_tree(start_path):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    tree = []

    def recursive_tree(path, prefix=""):
        items = sorted(os.listdir(path))
        for i, item in enumerate(items):
            if should_ignore(item):
                continue
            is_last = i == len([x for x in items if not should_ignore(x)]) - 1
            full_path = os.path.join(path, item)
            rel_path = os.path.relpath(full_path)

            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫ –¥–µ—Ä–µ–≤—É
            if os.path.isdir(full_path):
                tree.append(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}{item}/")
                new_prefix = prefix + ("    " if is_last else "‚îÇ   ")
                recursive_tree(full_path, new_prefix)
            else:
                tree.append(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}{item}")

    tree.append(os.path.basename(start_path) + "/")
    recursive_tree(start_path)
    return "\n".join(tree)

def merge_files_with_content(start_path, output_file="output.txt"):
    with open(output_file, "w", encoding="utf-8") as out:
        # –ü–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        out.write("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n\n")
        out.write(get_project_tree(start_path))
        out.write("\n\n" + "=" * 80 + "\n\n")

        # –¢–µ–ø–µ—Ä—å –ø–∏—à–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        for root, dirs, files in os.walk(start_path):
            # –£–±–∏—Ä–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if not should_ignore(d)]

            for file in sorted(files):
                if should_ignore(file):
                    continue
                ext = os.path.splitext(file)[1]
                if ext not in INCLUDE_EXTENSIONS:
                    continue

                file_path = os.path.join(root, file)
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        content = f.read()
                except Exception as e:
                    content = f"[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}]"

                relative_path = os.path.relpath(file_path, start_path)
                out.write(f"\n\nüìÑ –§–∞–π–ª: {relative_path}\n")
                out.write("-" * (len(relative_path) + 7) + "\n")
                out.write(content)
                out.write("\n" + "-" * 80)

    print(f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ '{output_file}'")

if __name__ == "__main__":
    merge_files_with_content(".")
--------------------------------------------------------------------------------

üìÑ –§–∞–π–ª: models.py
----------------
"""
–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ORM-–º–æ–¥–µ–ª–µ–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

–í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å: Resume.
"""

from sqlalchemy import Column, Integer, String, Text, DateTime, JSON
from database.session import Base
from datetime import datetime


class Resume(Base):
    __tablename__ = "resumes"

    id = Column(String(100), primary_key=True, index=True)
    first_name = Column(String(128))
    middle_name = Column(String(128))
    last_name = Column(String(128))
    title = Column(String(255))
    age = Column(Integer)
    location = Column(String(100))  # –≥–æ—Ä–æ–¥
    salary_json = Column(JSON)     # —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ 'salary'
    experience = Column(Text)      # –æ–ø—ã—Ç –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫–∞
    total_experience_months = Column(Integer)  # –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI
    link = Column(String(512))     # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ (alternate_url)
    received_at = Column(DateTime, default=datetime.utcnow)

class EStaffResume(Base):
    __tablename__ = 'estaff_resumes'

    id = Column(String(100), primary_key=True)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    code = Column(String(50))  # –∫–æ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    first_name = Column(String(128))  # –∏–º—è
    last_name = Column(String(128))  # —Ñ–∞–º–∏–ª–∏—è
    middle_name = Column(String(128))  # –æ—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    full_name = Column(String(256))  # –ø–æ–ª–Ω–æ–µ –∏–º—è
    first_name_en = Column(String(128))  # –∏–º—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    last_name_en = Column(String(128))  # —Ñ–∞–º–∏–ª–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    full_name_en = Column(String(256))  # –ø–æ–ª–Ω–æ–µ –∏–º—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    gender_id = Column(Integer)  # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª–∞
    mobile_phone = Column(String(30))  # –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    desired_position_name = Column(String(255))  # –∂–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    work_type_id = Column(Integer)  # —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    entrance_type_id = Column(String(100))  # —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, vacancy_response)
    source_id = Column(String(100))  # –∏—Å—Ç–æ—á–Ω–∏–∫ (hh.ru)
    educ_type_id = Column(Integer)  # —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    time_zone = Column(Integer)  # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    state_id = Column(String(100))  # —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, phone_interview:call_failed)
    state_date = Column(DateTime)  # –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_end_date = Column(DateTime)  # –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    cp_date = Column(DateTime)  # –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è

    is_active = Column(Integer)  # –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (0/1)
    last_comment = Column(Text)  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    inet_uid = Column(String(255))  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –≤–Ω–µ—à–Ω–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    user_id = Column(String(100))  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–∏–≤—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    group_id = Column(String(100))  # –≥—Ä—É–ø–ø–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç

    creation_date = Column(DateTime, default=datetime.utcnow)  # –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    last_mod_date = Column(DateTime, onupdate=datetime.utcnow)  # –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    main_vacancy_id = Column(String(100))  # –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
    main_vacancy_division_id = Column(String(100))  # –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏

    # –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    resume_html = Column(Text)  # HTML-—Ä–µ–∑—é–º–µ
    has_legacy_auto_resume = Column(Integer)  # –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ
    legacy_photo_checked = Column(Integer)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –≥—Ä—É–ø–ø—ã
    idata_source_ids = Column(JSON)  # —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (hh.ru, site –∏ —Ç.–ø.)
    idata_group_ids = Column(JSON)  # —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    multi_attachment_type_id = Column(String(100))  # —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è (resume)
--------------------------------------------------------------------------------

üìÑ –§–∞–π–ª: repository.py
--------------------
"""
–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–æ–¥–µ–ª—å—é Resume.
"""

import json
from typing import Optional, List
from database.models import Resume
from sqlalchemy.orm import Session


class ResumeRepository:
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—é–º–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Methods:
        get_by_link(db, link): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—é–º–µ –ø–æ —Å—Å—ã–ª–∫–µ.
        create_resume(db, resume_data): –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –≤ –ë–î.
        get_all_resumes(db, skip, limit): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
        delete_resume(db, resume_id): –£–¥–∞–ª—è–µ—Ç —Ä–µ–∑—é–º–µ –ø–æ ID.
    """

    def __init__(self, db: Session):
        self.db = db

    def get_by_link(self, link: str) -> Optional[Resume]:
        """
        –ò—â–µ—Ç —Ä–µ–∑—é–º–µ –ø–æ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–µ.

        Args:
            link (str): –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ.

        Returns:
            Resume | None: –ù–∞–π–¥–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ None.
        """
        return self.db.query(Resume).filter(Resume.link == link).first()

    def resume_exists(self, resume_id: str) -> bool:
        return self.db.query(Resume.id).filter(Resume.id == resume_id).first() is not None

    def create_resume(self, resume_data: dict) -> Resume:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –≤ –ë–î.

        Args:
            resume_data (dict): –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ.

        Returns:
            Resume: –°–æ–∑–¥–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ.
        """
        total_exp = resume_data.get("total_experience")
        total_months = total_exp.get("months") if isinstance(total_exp, dict) else None

        db_resume = Resume(
            id=resume_data.get("id"),
            first_name=resume_data.get("first_name"),
            middle_name=resume_data.get("middle_name"),
            last_name=resume_data.get("last_name"),
            title=resume_data.get("title"),
            age=resume_data.get("age"),
            location=resume_data.get("area", {}).get("name"),
            salary_json=json.dumps(resume_data.get("salary")) if resume_data.get("salary") else None,
            experience=json.dumps(resume_data.get("experience")),
            total_experience_months=total_months,
            link=resume_data.get("alternate_url")
        )
        self.db.add(db_resume)
        self.db.commit()
        self.db.refresh(db_resume)
        return db_resume

    @classmethod
    def get_all_resumes(self, skip: int = 0, limit: int = 100) -> List[Resume]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

        Args:
            skip (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π.

        Returns:
            list[Resume]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ.
        """
        return self.db.query(Resume).offset(skip).limit(limit).all()

    @staticmethod
    def delete_resume(db: Session, resume_id: int) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç —Ä–µ–∑—é–º–µ –ø–æ ID.

        Args:
            db (Session): –°–µ—Å—Å–∏—è SQLAlchemy.
            resume_id (int): ID —Ä–µ–∑—é–º–µ.
        """
        db.query(Resume).filter(Resume.id == resume_id).delete()
        db.commit()
--------------------------------------------------------------------------------

üìÑ –§–∞–π–ª: session.py
-----------------
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ SQLAlchemy.

–°–æ–¥–µ—Ä–∂–∏—Ç engine, –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π –∏ —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π.
"""

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from config import conf

# –ü—Ä—è–º–æ–π –ø—É—Ç—å –∫ –ë–î (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–ª—è —Ç–µ—Å—Ç–∞)
db_url = "postgresql://HRWorker_user:12345678@localhost:5432/HRWorker_database"

engine = create_engine(db_url, pool_pre_ping=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()


def get_db():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Depends –≤ Flask).

    Yields:
        Session: –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ SQLAlchemy.
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
--------------------------------------------------------------------------------